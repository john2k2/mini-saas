generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String         @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  createdAt      DateTime       @default(now())
  accounts       Account[]
  apiUsage       ApiUsage[]
  pageViews      PageView[]
  sessions       Session[]
  subscription   Subscription?
  userActivities UserActivity[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String    @default("inactive")
  currentPeriodEnd     DateTime?
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  metadata  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)], name: "idx_user_activity_user_date")
  @@index([action, createdAt(sort: Desc)], name: "idx_user_activity_action_date")
  @@index([userId, action], name: "idx_user_activity_user_action")
}

model PageView {
  id        String   @id @default(cuid())
  userId    String?
  page      String
  userAgent String?
  ip        String?
  duration  Int?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)], name: "idx_page_view_user_date")
  @@index([page, createdAt(sort: Desc)], name: "idx_page_view_page_date")
  @@index([ip, createdAt(sort: Desc)], name: "idx_page_view_ip_date")
}

model ApiUsage {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  method    String
  status    Int
  duration  Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt(sort: Desc)], name: "idx_api_usage_user_date")
  @@index([endpoint, createdAt(sort: Desc)], name: "idx_api_usage_endpoint_date")
  @@index([status, createdAt(sort: Desc)], name: "idx_api_usage_status_date")
}
